// Generated by CoffeeScript 1.7.1
var Contact, ContactActivity;

Contact = require('../models/contact');

ContactActivity = {
  search: function(data, cb) {
    var params;
    if (data.query != null) {
      params = {
        startkey: data.query,
        endkey: data.query + "\uFFFF"
      };
      return Contact.request('byName', params, cb);
    } else {
      return Contact.request('all', cb);
    }
  },
  create: function(data, cb) {
    var contact;
    contact = {
      fn: data.contact.name,
      datapoints: [
        {
          name: "email",
          value: data.contact.address
        }
      ]
    };
    return Contact.create(contact, cb);
  },
  "delete": function(data, cb) {
    return Contact.find(data.id, function(err, contact) {
      if ((err != null) || (contact == null)) {
        return cb(err);
      } else {
        return contact.destroy(cb);
      }
    });
  }
};

module.exports.create = function(req, res, next) {
  var activity;
  activity = req.body;
  switch (activity.data.type) {
    case 'contact':
      if (ContactActivity[activity.name] != null) {
        return ContactActivity[activity.name](activity.data, function(err, result) {
          var address, contact, contacts, dp, newContact, _i, _j, _len, _len1, _ref;
          if (err != null) {
            return res.send(400, {
              name: err,
              error: true
            });
          } else {
            if (result != null) {
              contacts = [];
              for (_i = 0, _len = result.length; _i < _len; _i++) {
                contact = result[_i];
                address = null;
                _ref = contact.datapoints;
                for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
                  dp = _ref[_j];
                  if (dp.name === 'email') {
                    address = dp.value;
                  }
                }
                if (address != null) {
                  newContact = {
                    id: contact.id,
                    name: contact.fn,
                    address: address
                  };
                  contacts.push(newContact);
                }
              }
              return res.send(201, {
                result: contacts
              });
            } else {
              return res.send(200);
            }
          }
        });
      } else {
        return res.send(400, {
          name: "Unknown activity name",
          error: true
        });
      }
      break;
    default:
      return res.send(400, {
        name: "Unknown activity data type",
        error: true
      });
  }
};
