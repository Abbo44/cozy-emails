// Generated by CoffeeScript 1.7.1
var Account, ImapProcess, Mailbox, Promise, async, log;

async = require('async');

Account = require('../models/account');

Mailbox = require('../models/mailbox');

ImapProcess = require('../processes/imap_processes');

Promise = require('bluebird');

log = require('../utils/logging')({
  prefix: 'mailbox:controller'
});

module.exports.create = function(req, res, next) {
  var pAccount, pParent;
  log.info("Creating " + req.body.label + " under " + req.body.parentID + " in " + req.body.accountID);
  pAccount = Account.findPromised(req.body.accountID);
  pParent = req.body.parentID ? Mailbox.findPromised(req.body.parentID) : Promise.resolve(null);
  return Promise.join(pAccount, pParent, function(account, parent) {
    var mailbox, path, tree;
    if (parent) {
      path = parent.path + parent.delimiter + req.body.label;
      tree = parent.tree.concat(req.body.label);
    } else {
      path = req.body.label;
      tree = [req.body.label];
    }
    mailbox = new Mailbox({
      accountID: account.id,
      label: req.body.label,
      path: path,
      tree: tree,
      delimiter: '/',
      attribs: [],
      children: []
    });
    return ImapProcess.createBox(account, mailbox.path).then(function() {
      return Mailbox.createPromised(mailbox.toObject());
    })["return"](account);
  }).then(function(account) {
    return account.includeMailboxes();
  }).then(function(account) {
    return res.send(account);
  })["catch"](function(err) {
    log.error(err);
    return next(err);
  });
};

module.exports.update = function(req, res, next) {
  log.info("Updating " + req.params.mailboxID + " to " + req.body.label);
  return Mailbox.findPromised(req.params.mailboxID).then(function(box) {
    return Account.findPromised(box.accountID).then(function(account) {
      var newPath, parentPath;
      parentPath = box.path.substring(0, box.path.lastIndexOf(box.label));
      newPath = parentPath + req.body.label;
      return ImapProcess.renameBox(account, box.path, newPath).then(function() {
        box.label = req.body.label;
        box.path = newPath;
        box.tree[box.tree.length - 1] = req.body.label;
        return box.savePromised();
      })["return"](account);
    });
  }).then(function(account) {
    return account.includeMailboxes();
  }).then(function(account) {
    return res.send(account);
  })["catch"](next);
};

module.exports["delete"] = function(req, res, next) {
  log.info("Deleting " + req.params.mailboxID);
  return Mailbox.findPromised(req.params.mailboxID).then(function(box) {
    return Account.findPromised(box.accountID).then(function(account) {
      return ImapProcess.deleteBox(account, box.path).then(function() {
        return box.destroyEverything();
      })["return"](account);
    });
  }).then(function(account) {
    return account.includeMailboxes();
  }).then(function(account) {
    return res.send(account);
  })["catch"](next);
};
