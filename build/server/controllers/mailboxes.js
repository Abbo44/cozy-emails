// Generated by CoffeeScript 1.7.1
var Account, Mailbox, Promise, async, log;

async = require('async');

Account = require('../models/account');

Mailbox = require('../models/mailbox');

Promise = require('bluebird');

log = require('../utils/logging')({
  prefix: 'mailbox:controller'
});

module.exports.create = function(req, res, next) {
  var pAccount, pParent;
  log.info(("Creating " + req.body.label + " under " + req.body.parentID) + (" in " + req.body.accountID));
  pAccount = Account.findPromised(req.body.accountID);
  pParent = req.body.parentID ? Mailbox.findPromised(req.body.parentID) : Promise.resolve(null);
  return Promise.join(pAccount, pParent, function(account, parent) {
    var mailbox, path, tree;
    if (parent) {
      path = parent.path + parent.delimiter + req.body.label;
      tree = parent.tree.concat(req.body.label);
    } else {
      path = req.body.label;
      tree = [req.body.label];
    }
    mailbox = {
      accountID: account.id,
      label: req.body.label,
      path: path,
      tree: tree,
      delimiter: (parent != null ? parent.delimiter : void 0) || '/',
      attribs: []
    };
    return account.imap_createBox(path).then(function() {
      return Mailbox.createPromised(mailbox);
    })["return"](account);
  }).then(function(account) {
    return account.toObjectWithMailbox();
  }).then(function(account) {
    return res.send(account);
  })["catch"](next);
};

module.exports.update = function(req, res, next) {
  var pAccount, pBox;
  log.info("Updating " + req.params.mailboxID + " to " + req.body.label);
  pBox = Mailbox.findPromised(req.params.mailboxID);
  pAccount = pBox.then(function(box) {
    return Account.findPromised(box.accountID);
  });
  return Promise.join(pBox, pAccount, function(box, account) {
    var newPath, parentPath, path;
    path = box.path;
    parentPath = path.substring(0, path.lastIndexOf(box.label));
    newPath = parentPath + req.body.label;
    return account.imap_renameBox(path, newPath).then(function() {
      return box.renameWithChildren(newPath);
    })["return"](account);
  }).then(function(account) {
    return account.toObjectWithMailbox();
  }).then(function(account) {
    return res.send(account);
  })["catch"](next);
};

module.exports["delete"] = function(req, res, next) {
  var pAccount, pBox;
  log.info("Deleting " + req.params.mailboxID);
  pBox = Mailbox.findPromised(req.params.mailboxID);
  pAccount = pBox.then(function(box) {
    return Account.findPromised(box.accountID);
  });
  return Promise.join(pBox, pAccount, function(box, account) {
    return account.imap_deleteBox(box.path).then(function() {
      return box.destroyAndRemoveAllMessages();
    })["return"](account);
  }).then(function(account) {
    return account.toObjectWithMailbox();
  }).then(function(account) {
    return res.send(account);
  })["catch"](next);
};
