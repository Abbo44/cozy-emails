// Generated by CoffeeScript 1.7.1
var ImapScheduler, Mailbox, Message, Promise, log, _;

Message = require('./message');

Mailbox = require('./mailbox');

ImapScheduler = require('../processes/imap_scheduler');

Promise = require('bluebird');

_ = require('lodash');

log = require('../utils/logging')('models:message_imap');

Message.prototype.doASAP = function(gen) {
  return ImapScheduler.instanceFor(this.accountID).then(function(scheduler) {
    return scheduler.doASAP(gen);
  });
};

Message.prototype.imap_applyChanges = function(flagsOps, boxOps) {
  var boxIndex;
  boxIndex = {};
  return Mailbox.getBoxes(this.accountID).map((function(_this) {
    return function(box) {
      var uid;
      uid = _this.mailboxIDs[box.id];
      return boxIndex[box.id] = {
        path: box.path,
        uid: uid
      };
    };
  })(this)).then(function() {
    var boxid, _i, _len, _ref, _results;
    _ref = boxOps.addTo;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      boxid = _ref[_i];
      if (!boxIndex[boxid]) {
        throw new Error("the box ID=" + box + " doesn't exists");
      }
    }
    return _results;
  }).then((function(_this) {
    return function() {
      return _this.doASAP(function(imap) {
        var boxid, uid;
        boxid = Object.keys(_this.mailboxIDs)[0];
        uid = _this.mailboxIDs[boxid];
        return imap.openBox(boxIndex[boxid].path).then(function() {
          if (flagsOps.add.length) {
            imap.addFlags(uid, flagsOps.add);
            return log.info("ADDED FLAGS " + boxIndex[boxid].path + ":" + uid, flagsOps.add);
          }
        }).then(function() {
          if (flagsOps.remove.length) {
            imap.delFlags(uid, flagsOps.remove);
            return log.info("DELETED FLAGS " + boxIndex[boxid].path + ":" + uid, flagsOps.add);
          }
        }).then(function() {
          _this.flags = _.union(_this.flags, flagsOps.add);
          return _this.flags = _.difference(_this.flags, flagsOps.remove);
        }).then(function() {
          return Promise.serie(boxOps.addTo, function(destId) {
            return imap.copy(uid, boxIndex[destId].path).then(function(uidInDestination) {
              log.info("  COPIED " + boxIndex[boxid].path + ":" + uid);
              log.info("  TO " + boxIndex[destId].path + ":" + uidInDestination);
              return _this.mailboxIDs[destId] = uidInDestination;
            });
          });
        }).then(function() {
          return Promise.serie(boxOps.removeFrom, function(boxid) {
            var path, _ref;
            _ref = boxIndex[boxid], path = _ref.path, uid = _ref.uid;
            return imap.openBox(path).then(function() {
              return imap.addFlags(uid, '\\Deleted');
            }).then(function() {
              return imap.expunge(uid);
            }).then(function() {
              return delete _this.mailboxIDs[boxid];
            }).tap(function() {
              return log.info("  DELETED " + path + ":" + uid);
            });
          });
        });
      });
    };
  })(this));
};
