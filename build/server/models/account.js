// Generated by CoffeeScript 1.7.1
var Account, ImapProcess, Mailbox, Promise, WrongConfigError, americano, log;

americano = require('americano-cozy');

Account = (function() {
  function Account() {}

  return Account;

})();

module.exports = Account = americano.getModel('Account', {
  label: String,
  name: String,
  login: String,
  password: String,
  smtpServer: String,
  smtpPort: Number,
  imapServer: String,
  imapPort: Number,
  inboxMailbox: String,
  draftMailbox: String,
  sentMailbox: String,
  trashMailbox: String,
  junkMailbox: String,
  allMailbox: String,
  favorites: function(x) {
    return x;
  },
  mailboxes: function(x) {
    return x;
  }
});

Mailbox = require('./mailbox');

ImapProcess = require('../processes/imap_processes');

Promise = require('bluebird');

WrongConfigError = require('../utils/errors').WrongConfigError;

log = require('../utils/logging')({
  prefix: 'models:account'
});

Account.refreshAllAccounts = function() {
  var allAccounts;
  allAccounts = Account.requestPromised('all');
  return Promise.serie(allAccounts, function(account) {
    return ImapProcess.fetchAccount(account);
  });
};

Account.prototype.fetchMails = function() {
  return ImapProcess.fetchAccount(this);
};

Account.prototype.includeMailboxes = function() {
  return Mailbox.getClientTree(this.id).then((function(_this) {
    return function(mailboxes) {
      return _this.mailboxes = mailboxes;
    };
  })(this))["return"](this);
};

Account.createIfValid = function(data) {
  var accountAndBoxesCreated, returnValue;
  accountAndBoxesCreated = ImapProcess.fetchBoxesTree(data).then(function(rawBoxesTree) {
    log.info("GOT BOXES", rawBoxesTree);
    return Promise.all([rawBoxesTree, Account.createPromised(data)]);
  }).spread(function(rawBoxesTree, account) {
    return Mailbox.createBoxesFromImapTree(account.id, rawBoxesTree).then(function(specialUses) {
      return account.updateAttributesPromised(specialUses);
    });
  });
  returnValue = accountAndBoxesCreated.then(function(account) {
    log.info("CREATED ACCOUNT & BOXES");
    return account.includeMailboxes();
  });
  accountAndBoxesCreated.then(function(account) {
    return ImapProcess.fetchAccount(account)["catch"](function(err) {
      return console.log("FETCH MAIL FAILED", err.stack);
    });
  });
  return returnValue;
};

Account.prototype.sendMessage = function(message, callback) {
  var transport;
  transport = nodemailer.createTransport({
    port: this.smtpPort,
    host: this.smtpHost,
    auth: {
      user: this.login,
      pass: this.password
    }
  });
  return transport.sendMail(message, callback);
};

Promise.promisifyAll(Account, {
  suffix: 'Promised'
});

Promise.promisifyAll(Account.prototype, {
  suffix: 'Promised'
});
