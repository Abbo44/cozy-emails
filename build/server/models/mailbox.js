// Generated by CoffeeScript 1.7.1
var Mailbox, Message, Promise, americano, log, _,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

americano = require('americano-cozy');

Promise = require('bluebird');

_ = require('lodash');

module.exports = Mailbox = americano.getModel('Mailbox', {
  accountID: String,
  label: String,
  path: String,
  tree: function(x) {
    return x;
  },
  delimiter: String,
  uidvalidity: Number,
  persistentUIDs: Boolean,
  attribs: function(x) {
    return x;
  }
});

Message = require('./message');

log = require('../utils/logging')({
  prefix: 'models:mailbox'
});

Mailbox.RFC6154 = {
  draftMailbox: '\\Drafts',
  sentMailbox: '\\Sent',
  trashMailbox: '\\Trash',
  allMailbox: '\\All',
  spamMailbox: '\\Junk',
  flaggedMailbox: '\\Flagged'
};

Mailbox.prototype.isInbox = function() {
  return this.path === 'INBOX';
};

Mailbox.prototype.RFC6154use = function() {
  var attribute, field, _ref;
  _ref = Mailbox.RFC6154;
  for (field in _ref) {
    attribute = _ref[field];
    if (__indexOf.call(this.attribs, attribute) >= 0) {
      return field;
    }
  }
};

Mailbox.prototype.guessUse = function() {
  var path;
  path = this.path.toLowerCase();
  if (0 === path.indexOf('sent')) {
    return 'sentMailbox';
  } else if (0 === path.indexOf('draft')) {
    return 'draftMailbox';
  } else if (0 === path.indexOf('flagged')) {
    return 'flaggedMailbox';
  } else if (0 === path.indexOf('trash')) {
    return 'trashMailbox';
  }
};

Mailbox.getBoxes = function(accountID) {
  return Mailbox.rawRequestPromised('treeMap', {
    startkey: [accountID],
    endkey: [accountID, {}],
    include_docs: true
  }).map(function(row) {
    return new Mailbox(row.doc);
  }).filter(function(box) {
    return __indexOf.call(box.attribs, '\\Noselect') < 0;
  });
};

Mailbox.prototype.getChildren = function() {
  return Mailbox.rawRequestPromised('treemap', {
    startkey: [this.accountID].concat(this.tree, ''),
    endkey: [this.accountID].concat(this.tree, {}),
    include_docs: true
  }).map(function(row) {
    return new Mailbox(row.doc);
  });
};

Mailbox.getClientTree = function(accountID) {
  var DELIMITER, byPath, out;
  out = [];
  byPath = {};
  DELIMITER = '/|/';
  return Mailbox.rawRequestPromised('treeMap', {
    startkey: [accountID],
    endkey: [accountID, {}],
    include_docs: true
  }).each(function(row) {
    var box, parentPath, path;
    path = row.key.slice(1);
    box = byPath[path.join(DELIMITER)] = _.pick(row.doc, 'label', 'attribs');
    box.id = row.id;
    box.children = [];
    if (path.length === 1) {
      return out.push(box);
    } else {
      parentPath = path.slice(0, -1).join(DELIMITER);
      if (byPath[parentPath] != null) {
        return byPath[parentPath].children.push(box);
      } else {
        return log.error("NO MAILBOX of path " + parentPath + " in " + accountID);
      }
    }
  })["return"](out);
};

Mailbox.destroyByAccount = function(accountID) {
  return Mailbox.rawRequestPromised('treemap', {
    startkey: [accountID],
    endkey: [accountID, {}]
  }).serie(function(row) {
    return new Mailbox({
      id: row.id
    }).destroyPromised()["catch"](function(err) {
      return log.error("Fail to delete box", err.stack || err);
    });
  });
};

Mailbox.prototype.renameWithChildren = function(newPath, newLabel) {
  var depth, path;
  depth = this.tree.length - 1;
  path = this.path;
  return this.getChildren().then((function(_this) {
    return function(children) {
      _this.label = newLabel;
      _this.path = newPath;
      _this.tree[depth] = newLabel;
      return _this.savePromised().then(function() {
        return Promise.serie(children, function(child) {
          child.path = child.path.replace(path, newPath);
          child.tree[depth] = newLabel;
          return child.savePromised();
        });
      });
    };
  })(this));
};

Mailbox.prototype.destroyAndRemoveAllMessages = function() {
  var destroyBox, destroyMessages;
  destroyBox = function(box) {
    return box.destroyPromised();
  };
  destroyMessages = function(box) {
    return Message.safeRemoveAllFromBox(box.id);
  };
  return this.getChildren().then((function(_this) {
    return function(children) {
      var mailboxesDestroyed;
      log.info("DESTROYING BOX " + _this.id + " AND ITS " + children.length + " CHILDREN");
      mailboxesDestroyed = destroyBox(_this).then(function() {
        return Promise.serie(children, destroyBox);
      }).tap(function() {
        return log.info("  BOXES DESTROYED");
      });
      mailboxesDestroyed.then(function() {
        return destroyMessages(_this);
      }).tap(function() {
        return log.info("  THIS MESSAGES DESTROYED");
      }).then(function() {
        return Promise.serie(children, destroyMessages);
      }).tap(function() {
        return log.info("  CHILDREN MESSAGES DESTROYED");
      })["catch"](function(err) {
        return log.error("Fail to remove messages from box", err.stack || err);
      });
      return mailboxesDestroyed;
    };
  })(this));
};

require('./mailbox_imap');

require('bluebird').promisifyAll(Mailbox, {
  suffix: 'Promised'
});

require('bluebird').promisifyAll(Mailbox.prototype, {
  suffix: 'Promised'
});
