// Generated by CoffeeScript 1.7.1
var Account, AccountConfigError, Promise, SMTPConnection, log, nodemailer;

Account = require('./account');

Promise = require('bluebird');

nodemailer = require('nodemailer');

AccountConfigError = require('../utils/errors').AccountConfigError;

log = require('../utils/logging')({
  prefix: 'models:account_smtp'
});

SMTPConnection = require('nodemailer/node_modules/' + 'nodemailer-smtp-transport/node_modules/smtp-connection');

Account.prototype.sendMessage = function(message, callback) {
  var transport;
  if (this.isTest()) {
    return callback(null, {
      messageId: 66
    });
  }
  transport = nodemailer.createTransport({
    port: this.smtpPort,
    host: this.smtpServer,
    secure: this.smtpSSL,
    ignoreTLS: !this.smtpTLS,
    tls: {
      rejectUnauthorized: false
    },
    auth: {
      user: this.login,
      pass: this.password
    }
  });
  return transport.sendMail(message, callback);
};

Account.prototype.testSMTPConnection = function() {
  var auth, connection;
  if (this.isTest()) {
    return Promise.resolve(null);
  }
  connection = new SMTPConnection({
    port: this.smtpPort,
    host: this.smtpServer,
    secure: this.smtpSSL,
    ignoreTLS: !this.smtpTLS,
    tls: {
      rejectUnauthorized: false
    }
  });
  auth = {
    user: this.login,
    pass: this.password
  };
  return new Promise(function(resolve, reject) {
    var timeout;
    connection.once('error', function(err) {
      log.warn("SMTP CONNECTION ERROR", err);
      return reject(new AccountConfigError('smtpServer'));
    });
    timeout = setTimeout(function() {
      reject(new AccountConfigError('smtpPort'));
      return connection.close();
    }, 10000);
    return connection.connect(function(err) {
      if (err) {
        return reject(new AccountConfigError('smtpServer'));
      }
      clearTimeout(timeout);
      return connection.login(auth, function(err) {
        if (err) {
          reject(new AccountConfigError('auth'));
        } else {
          resolve('ok');
        }
        return connection.close();
      });
    });
  });
};
