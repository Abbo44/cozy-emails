{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","app/initialize.coffee","app/AppDispatcher.coffee","app/actions/AccountActionCreator.coffee","app/actions/LayoutActionCreator.coffee","app/actions/MailboxActionCreator.coffee","app/actions/MessageActionCreator.coffee","app/components/account-config.coffee","app/components/application.coffee","app/components/compose.coffee","app/components/conversation.coffee","app/components/mailbox-list.coffee","app/components/menu.coffee","app/components/message-list.coffee","app/components/message.coffee","app/constants/AppConstants.coffee","app/libs/PanelRouter.coffee","app/libs/flux/dispatcher/Dispatcher.coffee","app/libs/flux/invariant.js","app/libs/flux/store/Store.coffee","app/locales/en.coffee","app/mixins/RouterMixin.coffee","app/mixins/StoreWatchMixin.coffee","app/router.coffee","app/stores/AccountStore.coffee","app/stores/LayoutStore.coffee","app/stores/MailboxStore.coffee","app/stores/MessageStore.coffee","app/utils/XHRUtils.coffee"],"names":[],"mappings":"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","file":"bundle.js","sourceRoot":"/source/","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","# Waits for the DOM to be ready\nwindow.onload = ->\n\n    window.true = window.location.hostname is 'localhost'\n    # use Cozy instance locale or navigator language or \"en\" by default\n    locale = window.locale or window.navigator.language or \"en\"\n    moment.locale locale\n    locales = {}\n    try\n        locales = require \"./locales/#{locale}\"\n    catch err\n        console.log err\n        locales = require \"./locales/en\"\n    polyglot = new Polyglot()\n    # we give polyglot the data\n    polyglot.extend locales\n    # handy shortcut\n    window.t = polyglot.t.bind polyglot\n\n\n    # Flux initialization (must be called at the begining)\n    LayoutStore = require './stores/LayoutStore'\n    MessageStore = require './stores/MessageStore'\n    AccountStore = require './stores/AccountStore'\n    MailboxStore = require './stores/MailboxStore'\n\n    # Routing management\n    Router = require './router'\n    @router = new Router()\n    window.router = @router\n\n    # Binds the router and flux to the React application\n    Application = require './components/application'\n    application = Application router: @router\n    React.renderComponent application, document.body\n\n\n    # Starts the application by initializing the router\n    Backbone.history.start()\n\n\n    # Makes this object immuable.\n    Object.freeze this if typeof Object.freeze is 'function'\n","Dispatcher = require './libs/flux/dispatcher/Dispatcher'\n{PayloadSources} = require './constants/AppConstants'\n\n###\n    Custom dispatcher class to add semantic method.\n###\nclass AppDispatcher extends Dispatcher\n\n    handleViewAction: (action) ->\n        payload =\n            source: PayloadSources.VIEW_ACTION\n            action: action\n\n        @dispatch payload\n\n    handleServerAction: (action) ->\n        payload =\n            source: PayloadSources.SERVER_ACTION\n            action: action\n\n        @dispatch payload\n\n\nmodule.exports = new AppDispatcher()","XHRUtils = require '../utils/XHRUtils'\nAppDispatcher = require '../AppDispatcher'\nMailboxStore = require '../stores/MailboxStore'\n{ActionTypes} = require '../constants/AppConstants'\n\nmodule.exports = AccountActionCreator =\n\n    create: (inputValues) ->\n        AccountActionCreator._setNewAccountWaitingStatus true\n\n        XHRUtils.createAccount inputValues, (error, account) ->\n            # set a timeout to simulate the \"waiting\" state\n            setTimeout ->\n                AccountActionCreator._setNewAccountWaitingStatus false\n                if error?\n                    AccountActionCreator._setNewAccountError error\n                else\n                   AppDispatcher.handleViewAction\n                        type: ActionTypes.ADD_ACCOUNT\n                        value: account\n            , 2000\n\n    edit: (inputValues) ->\n        AccountActionCreator._setNewAccountWaitingStatus true\n        XHRUtils.editAccount inputValues, (error, account) ->\n            # set a timeout to simulate the \"waiting\" state\n            setTimeout ->\n                AccountActionCreator._setNewAccountWaitingStatus false\n                if error?\n                    AccountActionCreator._setNewAccountError error\n                else\n                   AppDispatcher.handleViewAction\n                        type: ActionTypes.EDIT_ACCOUNT\n                        value: account\n            , 2000\n\n    remove: (accountID) ->\n       AppDispatcher.handleViewAction\n            type: ActionTypes.REMOVE_ACCOUNT\n            value: accountID\n        XHRUtils.removeAccount accountID\n        window.router.navigate '', true\n\n    _setNewAccountWaitingStatus: (status) ->\n        AppDispatcher.handleViewAction\n            type: ActionTypes.NEW_ACCOUNT_WAITING\n            value: status\n\n    _setNewAccountError: (errorMessage) ->\n       AppDispatcher.handleViewAction\n            type: ActionTypes.NEW_ACCOUNT_ERROR\n            value: errorMessage\n\n    selectAccount: (accountID) ->\n        AppDispatcher.handleViewAction\n            type: ActionTypes.SELECT_ACCOUNT\n            value: accountID\n\n        # fetch the mailboxes if necessary\n        # useful when the page loads the first time\n        mailboxes = MailboxStore.getByAccount accountID\n        if (not mailboxes? or mailboxes.count() is 0) and accountID\n            XHRUtils.fetchMailboxByAccount accountID\n","XHRUtils = require '../utils/XHRUtils'\nAccountStore = require '../stores/AccountStore'\nAppDispatcher = require '../AppDispatcher'\n{ActionTypes} = require '../constants/AppConstants'\nAccountActionCreator = require './AccountActionCreator'\n\nmodule.exports = LayoutActionCreator =\n\n    showReponsiveMenu: ->\n        AppDispatcher.handleViewAction\n            type: ActionTypes.SHOW_MENU_RESPONSIVE\n            value: null\n\n    hideReponsiveMenu: ->\n        AppDispatcher.handleViewAction\n            type: ActionTypes.HIDE_MENU_RESPONSIVE\n            value: null\n\n    showMessageList: (panelInfo, direction) ->\n        LayoutActionCreator.hideReponsiveMenu()\n\n        defaultAccount = AccountStore.getDefault()\n        accountID = panelInfo.parameters[0] or defaultAccount?.get('id')\n\n        AccountActionCreator.selectAccount accountID\n\n        if accountID?\n            XHRUtils.fetchMessagesByAccount accountID\n\n    showConversation: (panelInfo, direction) ->\n        LayoutActionCreator.hideReponsiveMenu()\n        XHRUtils.fetchConversation panelInfo.parameters[0], (err, rawMessage) ->\n\n            # if there isn't a selected account (page loaded directly),\n            # select the message's account\n            selectedAccount = AccountStore.getSelected()\n            if  not selectedAccount? and rawMessage?.mailbox\n                AccountActionCreator.selectAccount rawMessage.mailbox\n\n\n    showComposeNewMessage: (panelInfo, direction) ->\n        LayoutActionCreator.hideReponsiveMenu()\n\n        # if there isn't a selected account (page loaded directly),\n        # select the default account\n        selectedAccount = AccountStore.getSelected()\n        if not selectedAccount?\n            defaultAccount = AccountStore.getDefault()\n            AccountActionCreator.selectAccount defaultAccount.get 'id'\n\n    showCreateAccount: (panelInfo, direction) ->\n        LayoutActionCreator.hideReponsiveMenu()\n        AccountActionCreator.selectAccount -1\n\n    showConfigAccount: (panelInfo, direction) ->\n        LayoutActionCreator.hideReponsiveMenu()\n        AccountActionCreator.selectAccount panelInfo.parameters[0]\n","AppDispatcher = require '../AppDispatcher'\n{ActionTypes} = require '../constants/AppConstants'\n\nmodule.exports =\n\n    receiveRawMailboxes: (mailboxes) ->\n        AppDispatcher.handleViewAction\n            type: ActionTypes.RECEIVE_RAW_MAILBOXES\n            value: mailboxes","AppDispatcher = require '../AppDispatcher'\n{ActionTypes} = require '../constants/AppConstants'\n\nmodule.exports =\n\n    receiveRawMessages: (messages) ->\n        AppDispatcher.handleViewAction\n            type: ActionTypes.RECEIVE_RAW_MESSAGES\n            value: messages\n\n    receiveRawMessage: (message) ->\n        AppDispatcher.handleViewAction\n            type: ActionTypes.RECEIVE_RAW_MESSAGE\n            value: message\n","{div, h3, form, label, input, button} = React.DOM\nclasser = React.addons.classSet\n\nAccountActionCreator = require '../actions/AccountActionCreator'\n\nmodule.exports = React.createClass\n    displayName: 'AccountConfig'\n\n    mixins: [\n        React.addons.LinkedStateMixin # two-way data binding\n    ]\n\n    render: ->\n        titleLabel = if @props.initialAccountConfig? then t \"mailbox edit\" else t \"mailbox new\"\n\n        if @props.isWaiting then buttonLabel = 'Saving...'\n        else if @props.initialAccountConfig? then buttonLabel = 'Edit'\n        else buttonLabel = t \"mailbox add\"\n\n        div id: 'mailbox-config',\n            h3 className: null, titleLabel\n\n            if @props.error\n                div className: 'error', @props.error\n\n            form className: 'form-horizontal',\n                div className: 'form-group',\n                    label htmlFor: 'mailbox-label', className: 'col-sm-2 col-sm-offset-2 control-label', t \"mailbox label\"\n                    div className: 'col-sm-3',\n                        input id: 'mailbox-label', valueLink: @linkState('label'), type: 'text', className: 'form-control', placeholder: t \"mailbox name short\"\n                div className: 'form-group',\n                    label htmlFor: 'mailbox-name', className: 'col-sm-2 col-sm-offset-2 control-label', t \"mailbox user name\"\n                    div className: 'col-sm-3',\n                        input id: 'mailbox-name', valueLink: @linkState('name'), type: 'text', className: 'form-control', placeholder: t \"mailbox user fullname\"\n                div className: 'form-group',\n                    label htmlFor: 'mailbox-email-address', className: 'col-sm-2 col-sm-offset-2 control-label', t \"mailbox address\"\n                    div className: 'col-sm-3',\n                        input id: 'mailbox-email-address', valueLink: @linkState('email'), type: 'email', className: 'form-control', placeholder: t \"mailbox address placeholder\"\n                div className: 'form-group',\n                    label htmlFor: 'mailbox-password', className: 'col-sm-2 col-sm-offset-2 control-label', t 'mailbox password'\n                    div className: 'col-sm-3',\n                        input id: 'mailbox-password', valueLink: @linkState('password'), type: 'password', className: 'form-control'\n\n                div className: 'form-group',\n                    label htmlFor: 'mailbox-smtp-server', className: 'col-sm-2 col-sm-offset-2 control-label', t \"mailbox sending server\"\n                    div className: 'col-sm-3',\n                        input id: 'mailbox-smtp-server', valueLink: @linkState('smtpServer'), type: 'text', className: 'form-control', placeholder: 'smtp.provider.tld'\n                    label htmlFor: 'mailbox-smtp-port', className: 'col-sm-1 control-label', 'Port'\n                        div className: 'col-sm-1',\n                            input id: 'mailbox-smtp-port', valueLink: @linkState('smtpPort'), type: 'text', className: 'form-control'\n\n                div className: 'form-group',\n                    label htmlFor: 'mailbox-imap-server', className: 'col-sm-2 col-sm-offset-2 control-label', t \"mailbox receiving server\"\n                    div className: 'col-sm-3',\n                        input id: 'mailbox-imap-server', valueLink: @linkState('imapServer'), type: 'text', className: 'form-control', placeholder: 'imap.provider.tld'\n                    label htmlFor: 'mailbox-imap-port', className: 'col-sm-1 control-label', 'Port'\n                    div className: 'col-sm-1',\n                        input id: 'mailbox-imap-port', valueLink: @linkState('imapPort'), type: 'text', className: 'form-control'\n\n                div className: 'form-group',\n                    div className: 'col-sm-offset-2 col-sm-5 text-right',\n                        if @props.initialAccountConfig?\n                            button className: 'btn btn-cozy', onClick: @onRemove, t \"mailbox remove\"\n                        button className: 'btn btn-cozy', onClick: @onSubmit, buttonLabel\n    onSubmit: (event) ->\n        # prevents the page from reloading\n        event.preventDefault()\n\n        accountValue = @state\n        if @props.initialAccountConfig?\n            mailboxValue.id = @props.initialAccountConfig.get 'id'\n            AccountActionCreator.edit @state\n        else\n            AccountActionCreator.create @state\n\n    onRemove: (event) ->\n        # prevents the page from reloading\n        event.preventDefault()\n\n        AccountActionCreator.remove @props.initialAccountConfig.get 'id'\n\n    componentWillReceiveProps: (props) ->\n        # prevents the form from changing during submission\n        if not props.isWaiting\n            # display the account values\n            if props.initialAccountConfig?\n                @setState props.initialAccountConfig.toJS()\n            else # reset the form if it is on 'new account' page\n                @setState @getInitialState true\n\n\n    getInitialState: (forceDefault) ->\n        if @props.initialAccountConfig? and not forceDefault\n            return {\n                label: @props.initialAccountConfig.get 'label'\n                name: @props.initialAccountConfig.get 'name'\n                email: @props.initialAccountConfig.get 'email'\n                password: @props.initialAccountConfig.get 'password'\n                smtpServer: @props.initialAccountConfig.get 'smtpServer'\n                smtpPort: @props.initialAccountConfig.get 'smtpPort'\n                imapServer: @props.initialAccountConfig.get 'imapServer'\n                imapPort: @props.initialAccountConfig.get 'imapPort'\n            }\n        else\n            return {\n                label: ''\n                name: ''\n                email: ''\n                password: ''\n                smtpServer: ''\n                smtpPort: 993\n                imapServer: ''\n                imapPort: 465\n            }\n\n","# React components\n{body, div, p, form, i, input, span, a} = React.DOM\nMenu = require './menu'\nMessageList = require './message-list'\nConversation = require './conversation'\nCompose = require './compose'\nAccountConfig = require './account-config'\nMailboxList = require './mailbox-list'\n\n# React addons\nReactCSSTransitionGroup = React.addons.CSSTransitionGroup\nclasser = React.addons.classSet\n\n# React Mixins\nRouterMixin = require '../mixins/RouterMixin'\nStoreWatchMixin = require '../mixins/StoreWatchMixin'\n\n# Flux stores\nAccountStore = require '../stores/AccountStore'\nMessageStore = require '../stores/MessageStore'\nLayoutStore = require '../stores/LayoutStore'\nMailboxStore = require '../stores/MailboxStore'\n\n# Flux actions\nLayoutActionCreator = require '../actions/LayoutActionCreator'\n\n\n###\n    This component is the root of the React tree.\n\n    It has two functions:\n        - building the layout based on the router\n        - listening for changes in  the model (Flux stores)\n          and re-render accordingly\n\n    About routing: it uses Backbone.Router as a source of truth for the layout.\n    (based on: https://medium.com/react-tutorials/react-backbone-router-c00be0cf1592)\n###\nmodule.exports = Application = React.createClass\n    displayName: 'Application'\n\n    mixins: [\n        StoreWatchMixin [AccountStore, MessageStore, LayoutStore, MailboxStore]\n        RouterMixin\n    ]\n\n    render: ->\n        # Shortcut\n        layout = @props.router.current\n        if not layout?\n            return div null, t \"app loading\"\n\n        # is the layout a full-width panel or two panels sharing the width\n        isFullWidth = not layout.rightPanel?\n\n        leftPanelLayoutMode = if isFullWidth then 'full' else 'left'\n\n        # css classes are a bit long so we use a subfunction to get them\n        panelClasses = @getPanelClasses isFullWidth\n\n        showMailboxConfigButton = @state.selectedAccount? and\n                                  layout.leftPanel.action isnt 'account.new'\n        if showMailboxConfigButton\n            # the button toggles the mailbox config\n            if layout.leftPanel.action is 'account.config'\n                configMailboxUrl = @buildUrl\n                    direction: 'left'\n                    action: 'account.messages'\n                    parameters: @state.selectedAccount.get 'id'\n                    fullWidth: true\n            else\n                configMailboxUrl = @buildUrl\n                    direction: 'left'\n                    action: 'account.config'\n                    parameters: @state.selectedAccount.get 'id'\n                    fullWidth: true\n\n        responsiveBackUrl = @buildUrl\n            leftPanel: layout.leftPanel\n            fullWidth: true\n\n        # classes for page-content\n        responsiveClasses = classer\n            'col-xs-12 col-md-11': true\n            'pushed': @state.isResponsiveMenuShown\n\n        # Actual layout\n        div className: 'container-fluid',\n            div className: 'row',\n\n                # Menu is self-managed because this part of the layout\n                # is always the same.\n                Menu\n                    accounts: @state.accounts\n                    selectedAccount: @state.selectedAccount\n                    isResponsiveMenuShown: @state.isResponsiveMenuShown\n                    layout: @props.router.current\n                    favoriteMailboxes: @state.favoriteMailboxes\n\n                div id: 'page-content', className: responsiveClasses,\n\n                    # The quick actions bar shoud be moved in its own component\n                    # when its feature is implemented.\n                    div id: 'quick-actions', className: 'row',\n                        # responsive menu icon\n                        if layout.rightPanel\n                            a href: responsiveBackUrl, className: 'responsive-handler hidden-md hidden-lg',\n                                i className: 'fa fa-chevron-left hidden-md hidden-lg pull-left'\n                                t \"app back\"\n                        else\n                            a onClick: @onResponsiveMenuClick, className: 'responsive-handler hidden-md hidden-lg',\n                                i className: 'fa fa-bars pull-left'\n                                t \"app menu\"\n\n\n                        div className: 'col-md-6 hidden-xs hidden-sm pull-left',\n                            form className: 'form-inline col-md-12',\n                                MailboxList\n                                    selectedAccount: @state.selectedAccount\n                                    mailboxes: @state.mailboxes\n                                    selectedMailbox: @state.selectedMailbox\n                                div className: 'form-group pull-left',\n                                    div className: 'input-group',\n                                        input className: 'form-control', type: 'text', placeholder: t \"app search\", onFocus: @onFocusSearchInput, onBlur: @onBlurSearchInput\n                                        div className: 'input-group-addon btn btn-cozy',\n                                            span className: 'fa fa-search'\n\n                        div id: 'contextual-actions', className: 'col-md-6 hidden-xs hidden-sm pull-left text-right',\n                            ReactCSSTransitionGroup transitionName: 'fade',\n                                if showMailboxConfigButton\n                                    a href: configMailboxUrl, className: 'btn btn-cozy mailbox-config',\n                                        i className: 'fa fa-cog'\n\n                    # Two layout modes: one full-width panel or two panels\n                    div id: 'panels', className: 'row',\n                        div className: panelClasses.leftPanel, key: 'left-panel-' + layout.leftPanel.action + '-' + layout.leftPanel.parameters.join('-'),\n                            @getPanelComponent layout.leftPanel, leftPanelLayoutMode\n                        if not isFullWidth and layout.rightPanel?\n                            div className: panelClasses.rightPanel, key: 'right-panel-' + layout.rightPanel.action + '-' + layout.rightPanel.parameters.join('-'),\n                                @getPanelComponent layout.rightPanel, 'right'\n\n\n    # Panels CSS classes are a bit long so we get them from a this subfunction\n    # Also, it manages transitions between screens by adding relevant classes\n    getPanelClasses: (isFullWidth) ->\n        previous = @props.router.previous\n        layout = @props.router.current\n        left = layout.leftPanel\n        right = layout.rightPanel\n\n        # Two cases: the layout has a full-width panel...\n        if isFullWidth\n            classes = leftPanel: 'panel col-xs-12 col-md-12'\n\n            # custom case for mailbox.config action (top right cog button)\n            if previous? and left.action is 'account.config'\n                classes.leftPanel += ' moveFromTopRightCorner'\n\n            # (default) when full-width panel is shown after a two-panels structure\n            else if previous? and previous.rightPanel\n\n                # if the full-width panel was on right right before, it expands\n                if previous.rightPanel.action is layout.leftPanel.action and\n                   _.difference(previous.rightPanel.parameters, layout.leftPanel.parameters).length is 0\n                    classes.leftPanel += ' expandFromRight'\n\n            # (default) when full-width panel is shown after a full-width panel\n            else if previous?\n                classes.leftPanel += ' moveFromLeft'\n\n\n        # ... or a two panels layout.\n        else\n            classes =\n                leftPanel: 'panel col-xs-12 col-md-6 hidden-xs hidden-sm'\n                rightPanel: 'panel col-xs-12 col-md-6'\n\n            # we don't animate in the first render\n            if previous?\n                wasFullWidth = not previous.rightPanel?\n\n                # transition from full-width to two-panels layout\n                if wasFullWidth and not isFullWidth\n\n                    # expanded right panel collapses\n                    if previous.leftPanel.action is right.action and\n                       _.difference(previous.leftPanel.parameters, right.parameters).length is 0\n                        classes.leftPanel += ' moveFromLeft'\n                        classes.rightPanel += ' slide-in-from-left'\n\n                    # (default) opens right panel sliding from the right\n                    else\n                        classes.rightPanel += ' slide-in-from-right'\n\n                # (default) opens right panel sliding from the left\n                else if not isFullWidth\n                    classes.rightPanel += ' slide-in-from-left'\n\n        return classes\n\n\n    # Factory of React components for panels\n    getPanelComponent: (panelInfo, layout) ->\n\n        # -- Generates a list of messages for a given mailbox\n        if panelInfo.action is 'account.messages'\n\n            firstMailbox = AccountStore.getDefault()\n\n            # gets the selected message if any\n            openMessage = null\n            direction = if layout is 'left' then 'rightPanel' else 'leftPanel'\n            otherPanelInfo = @props.router.current[direction]\n            if otherPanelInfo?.action is 'message'\n                openMessage = MessageStore.getByID otherPanelInfo.parameters[0]\n\n            # display messages of the selected mailbox\n            if panelInfo.parameters? and panelInfo.parameters.length > 0\n                MessageStore = MessageStore\n                accountID = panelInfo.parameters[0]\n                return MessageList\n                    messages: MessageStore.getMessagesByAccount accountID\n                    accountID: accountID\n                    layout: layout\n                    openMessage: openMessage\n\n            # default: display messages of the first mailbox\n            else if (not panelInfo.parameters? or panelInfo.parameters.length is 0) and firstMailbox?\n                MessageStore = MessageStore\n                accountID = firstMailbox.id\n                return MessageList\n                    messages: MessageStore.getMessagesByAccount accountID\n                    accountID: accountID\n                    layout: layout\n                    openMessage: openMessage\n\n            # there is no mailbox or mailbox is not found\n            else\n                return div null, 'Handle no mailbox or mailbox not found case'\n\n        # -- Generates a list of messages for a given account and mailbox\n        else if panelInfo.action is 'account.mailbox.messages'\n            accountID = panelInfo.parameters[0]\n            mailboxID = panelInfo.parameters[1]\n\n            # gets the selected message if any\n            openMessage = null\n            direction = if layout is 'left' then 'rightPanel' else 'leftPanel'\n            otherPanelInfo = @props.router.current[direction]\n            if otherPanelInfo?.action is 'message'\n                openMessage = MessageStore.getByID otherPanelInfo.parameters[0]\n\n            return MessageList\n                messages: MessageStore.getMessagesByMailbox mailboxID\n                accountID: accountID\n                layout: layout\n                openMessage: openMessage\n\n\n        # -- Generates a configuration window for a given account\n        else if panelInfo.action is 'account.config'\n            initialAccountConfig = @state.selectedAccount\n            error = AccountStore.getError()\n            isWaiting = AccountStore.isWaiting()\n            return AccountConfig {layout, error, isWaiting, initialAccountConfig}\n\n        # -- Generates a configuration window to create a new account\n        else if panelInfo.action is 'account.new'\n            error = AccountStore.getError()\n            isWaiting = AccountStore.isWaiting()\n            return AccountConfig {layout, error, isWaiting}\n\n        # -- Generates a conversation\n        else if panelInfo.action is 'message'\n            message = MessageStore.getByID panelInfo.parameters[0]\n            conversation = MessageStore.getMessagesByConversation panelInfo.parameters[0]\n            selectedAccount = @state.selectedAccount\n            return Conversation {message, conversation, selectedAccount, layout}\n\n        # -- Generates the new message composition form\n        else if panelInfo.action is 'compose'\n            selectedAccount = @state.selectedAccount\n            return Compose {selectedAccount, layout}\n\n        # -- Error case, shouldn't happen. Might be worth to make it pretty.\n        else return div null, 'Unknown component'\n\n    getStateFromStores: ->\n\n        selectedAccount = AccountStore.getSelected()\n        selectedAccountID = selectedAccount?.get('id') or null\n\n        leftPanelInfo = @props.router.current?.leftPanel\n        if leftPanelInfo?.action is 'account.account.messages'\n            selectedMailboxID = leftPanelInfo.parameters[1]\n        else\n            selectedMailboxID = null\n\n        selectedMailbox = MailboxStore.getSelected selectedAccountID, selectedMailboxID\n\n        return {\n            accounts: AccountStore.getAll()\n            selectedAccount: selectedAccount\n            isResponsiveMenuShown: LayoutStore.isMenuShown()\n            mailboxes: MailboxStore.getByAccount selectedAccountID\n            selectedMailbox: selectedMailbox\n            favoriteMailboxes: MailboxStore.getFavorites selectedAccountID\n        }\n\n\n    # Listens to router changes. Renders the component on changes.\n    componentWillMount: ->\n        # Uses `forceUpdate` with the proper scope because React doesn't allow\n        # to rebind its scope on the fly\n        @onRoute = (params) =>\n            {leftPanelInfo, rightPanelInfo} = params\n            @forceUpdate()\n\n        @props.router.on 'fluxRoute', @onRoute\n\n\n    # Stops listening to router changes\n    componentWillUnmount: ->\n        @props.router.off 'fluxRoute', @onRoute\n\n    # Toggle the menu in responsive mode\n    onResponsiveMenuClick: (event) ->\n        event.preventDefault()\n        if @state.isResponsiveMenuShown\n            LayoutActionCreator.hideReponsiveMenu()\n        else\n            LayoutActionCreator.showReponsiveMenu()\n","{div, h3, a, i, textarea} = React.DOM\nclasser = React.addons.classSet\n\nRouterMixin = require '../mixins/RouterMixin'\n\nmodule.exports = Compose = React.createClass\n    displayName: 'Compose'\n\n    mixins: [RouterMixin]\n\n    render: ->\n\n        expandUrl = @buildUrl\n            direction: 'left'\n            action: 'compose'\n            fullWidth: true\n\n        collapseUrl = @buildUrl\n            leftPanel:\n                action: 'account.messages'\n                parameters: @props.selectedAccount?.get 'id'\n            rightPanel:\n                action: 'compose'\n\n        closeUrl = @buildClosePanelUrl @props.layout\n\n        div id: 'email-compose',\n            h3 null,\n                a href: closeUrl, className: 'close-email hidden-xs hidden-sm',\n                    i className:'fa fa-times'\n                t 'compose'\n                if @props.layout isnt 'full'\n                    a href: expandUrl, className: 'expand hidden-xs hidden-sm',\n                        i className: 'fa fa-arrows-h'\n                else\n                    a href: collapseUrl, className: 'close-email pull-right',\n                        i className:'fa fa-compress'\n            textarea defaultValue: t 'compose default'\n","{div, ul, li, span, i, p, h3, a} = React.DOM\nMessage = require './message'\nclasser = React.addons.classSet\n\nRouterMixin = require '../mixins/RouterMixin'\n\nmodule.exports = React.createClass\n    displayName: 'Conversation'\n\n    mixins: [RouterMixin]\n\n    render: ->\n        if not @props.message? or not @props.conversation\n            return p null, t \"app loading\"\n\n        expandUrl = @buildUrl\n            direction: 'left'\n            action: 'message'\n            parameters: @props.message.get 'id'\n            fullWidth: true\n\n        if window.router.previous?\n            selectedAccountID = @props.selectedAccount.get 'id'\n        else\n            selectedAccountID = @props.conversation[0].mailbox\n\n        collapseUrl = @buildUrl\n            leftPanel:\n                action: 'account.messages'\n                parameters: selectedAccountID\n            rightPanel:\n                action: 'message'\n                parameters: @props.conversation[0].get 'id'\n\n        if @props.layout is 'full'\n            closeUrl = @buildUrl\n                direction: 'left'\n                action: 'account.messages'\n                parameters: selectedAccountID\n                fullWidth: true\n        else\n            closeUrl = @buildClosePanelUrl @props.layout\n\n        closeIcon = if @props.layout is 'full' then 'fa-th-list' else 'fa-times'\n\n        div className: 'conversation',\n\n            # allows multiple email open but UI is not good enough\n            #ul className: 'nav nav-tabs nav-justified',\n            #    li className: 'active',\n            #        a href: '#', 'Responsive Cozy Emails'\n            #        span className: 'close', 'x'\n            #    li null,\n            #        a href: '#', 'Responsive Cozy Emails'\n            #        span className: 'close', 'x'\n            #    li null,\n            #        a href: '#', 'Responsive Cozy Emails'\n            #        span className: 'close', 'x'\n            #    li null,\n            #        a href: '#', 'Responsive Cozy Emails'\n            #        span className: 'close', 'x'\n            #    li null,\n            #        a href: '#', 'Responsive Cozy Emails'\n            #        span className: 'close', 'x'\n\n            h3 null,\n                a href: closeUrl, className: 'close-conversation hidden-xs hidden-sm',\n                    i className:'fa ' + closeIcon\n                @props.message.get 'subject'\n                if @props.layout isnt 'full'\n                    a href: expandUrl, className: 'expand hidden-xs hidden-sm',\n                        i className: 'fa fa-arrows-h'\n                else\n                    a href: collapseUrl, className: 'close-conversation pull-right',\n                        i className:'fa fa-compress'\n\n            ul className: 'thread list-unstyled',\n                for message, key in @props.conversation\n                    isLast = key is @props.conversation.length - 1\n                    Message {message, key, isLast}\n","{div, ul, li, span, a, button} = React.DOM\n\nRouterMixin = require '../mixins/RouterMixin'\n\nmodule.exports = React.createClass\n    displayName: 'MailboxList'\n\n    mixins: [RouterMixin]\n\n    render: ->\n        if @props.mailboxes.length > 0\n            firstItem = @props.selectedMailbox\n            div className: 'dropdown pull-left',\n                button className: 'btn btn-default dropdown-toggle', type: 'button', 'data-toggle': 'dropdown',\n                    firstItem.get 'name'\n                    span className: 'caret', ''\n                ul className: 'dropdown-menu', role: 'menu',\n                    @props.mailboxes.map (mailbox, key) =>\n                        if mailbox.get('id') isnt @props.selectedMailbox.get('id')\n                            @getMailboxRender mailbox, key\n                    .toJS()\n        else\n            div null, t \"app loading\"\n\n\n    getMailboxRender: (mailbox, key) ->\n        url = @buildUrl\n                direction: 'left'\n                action: 'account.mailbox.messages'\n                parameters: [@props.selectedAccount.get('id'), mailbox.get('id')]\n\n        li role: 'presentation', key: key,\n            a href: url, role: 'menuitem', mailbox.get 'name'\n","{div, ul, li, a, span, i} = React.DOM\n\nclasser = React.addons.classSet\n\nRouterMixin = require '../mixins/RouterMixin'\n\nmodule.exports = Menu = React.createClass\n    displayName: 'Menu'\n\n    mixins: [RouterMixin]\n\n    shouldComponentUpdate: (nextProps, nextState) ->\n        return not Immutable.is(nextProps.accounts, @props.accounts) or\n               not Immutable.is(nextProps.selectedAccount, @props.selectedAccount) or\n               not _.isEqual(nextProps.layout, @props.layout) or\n               nextProps.isResponsiveMenuShown isnt @props.isResponsiveMenuShown or\n               not Immutable.is(nextProps.favoriteMailboxes, @props.favoriteMailboxes)\n\n    render: ->\n        selectedAccountUrl = @buildUrl\n            direction: 'left'\n            action: 'account.messages'\n            parameters: @props.selectedAccount?.get 'id'\n            fullWidth: true\n\n        # the button toggles the \"compose\" screen\n        if @props.layout.leftPanel.action is 'compose' or\n           @props.layout.rightPanel?.action is 'compose'\n            composeUrl = selectedAccountUrl\n        else\n            composeUrl = @buildUrl\n                direction: 'right'\n                action: 'compose'\n                parameters: null\n                fullWidth: false\n\n        # the button toggle the \"new mailbox\" screen\n        if @props.layout.leftPanel.action is 'account.new'\n            newMailboxUrl = selectedAccountUrl\n        else\n            newMailboxUrl = @buildUrl\n                direction: 'left'\n                action: 'account.new'\n                fullWidth: true\n\n        classes = classer\n            'hidden-xs hidden-sm': not @props.isResponsiveMenuShown\n            'col-xs-4 col-md-1': true\n\n        div id: 'menu', className: classes,\n            a href: composeUrl, className: 'menu-item compose-action',\n                i className: 'fa fa-edit'\n                span className: 'item-label', t 'menu compose'\n\n            ul id: 'account-list', className: 'list-unstyled',\n                @props.accounts.map (account, key) =>\n                    @getAccountRender account, key\n                .toJS()\n\n            a href: newMailboxUrl, className: 'menu-item new-account-action',\n                i className: 'fa fa-inbox'\n                span className: 'item-label', t 'menu account new'\n\n\n    # renders a single mailbox and its submenu\n    getAccountRender: (account, key) ->\n\n        isSelected = (not @props.selectedAccount? and key is 0) \\\n                     or @props.selectedAccount?.get('id') is account.get('id')\n\n        accountClasses = classer active: isSelected\n        url = @buildUrl\n            direction: 'left'\n            action: 'account.messages'\n            parameters: account.get 'id'\n            fullWidth: false\n\n        li className: accountClasses, key: key,\n            a href: url, className: 'menu-item ' + accountClasses,\n                i className: 'fa fa-inbox'\n                span className: 'badge', account.get 'unreadCount'\n                span className: 'item-label', account.get 'label'\n\n            ul className: 'list-unstyled submenu mailbox-list',\n                @props.favoriteMailboxes.map (mailbox, key) =>\n                    @getMailboxRender mailbox, key\n                .toJS()\n\n    getMailboxRender: (mailbox, key) ->\n        mailboxUrl = @buildUrl\n            direction: 'left'\n            action: 'account.mailbox.messages'\n            parameters: [mailbox.get('mailbox'), mailbox.get('id')]\n\n        a href: mailboxUrl, className: 'menu-item', key: key,\n            # Something must be rethought about the icon\n            i className: 'fa fa-star'\n            span className: 'badge', Math.floor((Math.random() * 10) + 1) # placeholder\n            span className: 'item-label', mailbox.get 'name'\n","{div, ul, li, a, span, i, p} = React.DOM\nclasser = React.addons.classSet\n\nRouterMixin = require '../mixins/RouterMixin'\n\nmodule.exports = React.createClass\n    displayName: 'MessageList'\n\n    mixins: [RouterMixin]\n\n    shouldComponentUpdate: (nextProps, nextState) ->\n        return not Immutable.is(nextProps.messages, @props.messages) or\n               not Immutable.is(nextProps.openMessage, @props.openMessage)\n\n    render: ->\n        div className: 'message-list',\n            if @props.messages.count() is 0\n                t \"list empty\"\n            else\n                ul className: 'list-unstyled',\n                    @props.messages.map (message, key) =>\n                        # only displays initial email of a thread\n                        if message.get('inReplyTo').length is 0\n                            isActive = @props.openMessage? and\n                                       @props.openMessage.get('id') is message.get('id')\n                            @getMessageRender message, key, isActive\n                    .toJS()\n\n    getMessageRender: (message, key, isActive) ->\n        classes = classer\n            read: message.get 'isRead'\n            active: isActive\n\n        url = @buildUrl\n            direction: 'right'\n            action: 'message'\n            parameters: message.get 'id'\n\n        today = moment()\n        date = moment message.get 'createdAt'\n        if date.isBefore today, 'year'\n            formatter = 'DD/MM/YYYY'\n        else if date.isBefore today, 'day'\n            formatter = 'DD MMMM'\n        else\n            formatter = 'hh:mm'\n\n        li className: 'message ' + classes, key: key,\n            a href: url,\n                i className: 'fa fa-user'\n                span className: 'participants', @getParticipants message\n                div className: 'preview',\n                    span className: 'title', message.get 'subject'\n                    p null, message.get 'text'\n                span className: 'hour', date.format formatter\n\n\n    getParticipants: (message) -> \"#{message.get 'from'}, #{message.get 'to'}\"\n","{div, ul, li, span, i, p, h3, a} = React.DOM\nclasser = React.addons.classSet\n\nmodule.exports = React.createClass\n    displayName: 'Message'\n\n    getInitialState: -> active: false\n\n    render: ->\n        clickHandler = if @props.isLast then null else @onClick\n\n        classes = classer\n            message: true\n            active: @state.active\n\n        today = moment()\n        date = moment @props.message.get 'createdAt'\n        if date.isBefore today, 'year'\n            formatter = 'DD/MM/YYYY'\n        else if date.isBefore today, 'day'\n            formatter = 'DD MMMM'\n        else\n            formatter = 'hh:mm'\n\n        li className: classes, key: @props.key, onClick: clickHandler,\n            div className: 'header',\n                i className: 'fa fa-user'\n                div className: 'participants',\n                    span  className: 'sender', @props.message.get 'from'\n                    span className: 'receivers', t \"mail receivers\", {dest: @props.message.get 'to'}\n                span className: 'hour', date.format formatter\n            div className: 'preview',\n                p null, @props.message.get 'text'\n            div className: 'content', @props.message.get 'text'\n            div className: 'clearfix'\n\n    onClick: (args) ->\n        @setState active: not @state.active\n","module.exports =\n\n    ActionTypes:\n        'ADD_ACCOUNT'               : 'ADD_ACCOUNT'\n        'REMOVE_ACCOUNT'            : 'REMOVE_ACCOUNT'\n        'EDIT_ACCOUNT'              : 'EDIT_ACCOUNT'\n        'SELECT_ACCOUNT'            : 'SELECT_ACCOUNT'\n        'NEW_ACCOUNT_WAITING'       : 'NEW_ACCOUNT_WAITING'\n        'NEW_ACCOUNT_ERROR'         : 'NEW_ACCOUNT_ERROR'\n\n        'RECEIVE_RAW_MESSAGE'       : 'RECEIVE_RAW_MESSAGE'\n        'RECEIVE_RAW_MESSAGES'      : 'RECEIVE_RAW_MESSAGES'\n\n        'SHOW_MENU_RESPONSIVE'      : 'SHOW_MENU_RESPONSIVE'\n        'HIDE_MENU_RESPONSIVE'      : 'HIDE_MENU_RESPONSIVE'\n        'SELECT_ACCOUNT'            : 'SELECT_ACCOUNT'\n\n        'RECEIVE_RAW_MAILBOX'  : 'RECEIVE_RAW_MAILBOX'\n\n\n    PayloadSources:\n        'VIEW_ACTION'   : 'VIEW_ACTION'\n        'SERVER_ACTION' : 'SERVER_ACTION'","###\n    Routing component. We let Backbone handling browser stuff\n    and we format the varying parts of the layout.\n\n    URLs are built in the following way:\n        - a first part that represents the left panel\n        - a second part that represents the right panel\n        - if there is just one part, it represents a full width panel\n\n    Since Backbone.Router only handles one part, routes initialization mechanism\n    is overriden so we can post-process the second part of the URL.\n\n    Example: a defined pattern will generates two routes.\n        - `mailbox/a/path/:id`\n        - `mailbox/a/path/:id/*rightPanel`\n\n        Each pattern is actually the pattern itself plus the pattern itself and\n        another pattern.\n###\n\nLayoutActionCreator = require '../actions/LayoutActionCreator'\n\nMailboxStore = require '../stores/MailboxStore'\n\nmodule.exports = class Router extends Backbone.Router\n\n    patterns: {}\n\n    # default route\n    routes: {}\n\n    previous: null\n    current: null\n\n    # we store a regexified version of each patterns\n    cachedPatterns: []\n\n    initialize: (options) ->\n\n        # defines the routes from the patterns\n        for key, route of @patterns\n\n            # caches each regex' pattern to avoid to recalculate them each time\n            @cachedPatterns.push\n                key: key\n                pattern: @_routeToRegExp route.pattern\n\n            # each pattern has two routes: full-width or with a right panel\n            @routes[route.pattern] = key\n            @routes[\"#{route.pattern}/*rightPanel\"] = key\n\n        # Backbone's magic\n        @_bindRoutes()\n\n        # Updates the LayoutStore for each matched request\n        @on 'route', (name, args) =>\n\n            [leftPanelInfo, rightPanelInfo] = @_processSubRouting name, args\n\n            leftAction = @fluxActionFactory leftPanelInfo\n            rightAction = @fluxActionFactory rightPanelInfo\n\n            @previous = @current\n            @current = leftPanel: leftPanelInfo, rightPanel: rightPanelInfo\n\n            if leftAction?\n                leftAction leftPanelInfo, 'left'\n\n            if rightAction?\n                rightAction rightPanelInfo, 'right'\n            @trigger 'fluxRoute', @current\n\n\n    ###\n        Gets the Flux action to execute given a panel info.\n    ###\n    fluxActionFactory: (panelInfo) ->\n\n        fluxAction = null\n        pattern = @patterns[panelInfo?.action]\n\n        if pattern?\n            fluxAction = LayoutActionCreator[pattern.fluxAction]\n\n            if not fluxAction?\n                console.warn \"`#{pattern.fluxAction}` method not found in layout actions.\"\n\n            return fluxAction\n\n\n    ###\n        Extracts and matches the second part of the URl if it exists.\n    ###\n    _processSubRouting: (name, args) ->\n\n        # remove the last argument which is always `null`, not sure why\n        args.pop()\n\n        # next comes the rightPanel url if it exists\n        # or a leftPanel parameter there is not rightPanel\n        rightPanelString = args.pop()\n\n        # if left panel number of expected params is bigger what is left\n        # it means there are no right panel and that what we got before was a\n        # parameter of the left panel\n        params = @patterns[name].pattern.match(/:[\\w]+/g) or []\n        if params.length > args.length\n            args.push rightPanelString\n            rightPanelString = null\n\n        leftPanelParameters = args\n\n        # check all the routes for the second part of the URL\n        route = _.first _.filter @cachedPatterns, (element) ->\n            return element.pattern.test rightPanelString\n\n        # if a route has been found, we retrieve the params' value and format it\n        if route?\n            args = @_extractParameters route.pattern, rightPanelString\n            # remove the last argument which is alway `null`, not sure why\n            args.pop()\n            rightPanelInfo = action: route.key, parameters: args\n        else\n            rightPanelInfo = null\n\n        # normalize the leftPanelInfo\n        leftPanelInfo = action: name, parameters: leftPanelParameters\n        return [leftPanelInfo, rightPanelInfo]\n\n\n    ###\n        Builds a route from panel information.\n        Two modes:\n            - options has leftPanel and/or rightPanel attributes with the\n              panel(s) information.\n            - options has the panel information along a `direction` attribute\n              that can be `left` or `right`. It's the short version.\n    ###\n    buildUrl: (options) ->\n\n        # Loads the panel from the options or the current router status to keep\n        # track of current URLs\n        if options.leftPanel? or options.rightPanel?\n            leftPanelInfo = options.leftPanel or @current.leftPanel\n            rightPanelInfo = options.rightPanel or @current.rightPanel\n        else\n            # Handles short version\n            if options.direction?\n                if options.direction is 'left'\n                    leftPanelInfo = options\n                    rightPanelInfo = @current.rightPanel\n                else if options.direction is 'right'\n                    leftPanelInfo = @current.leftPanel\n                    rightPanelInfo = options\n                else\n                    console.warn '`direction` should be `left`, `right`.'\n            else\n                console.warn '`direction` parameter is mandatory when using short call.'\n\n        # if the `fullWidth` parameter is set, it ignores the right panel info\n        if (options.leftPanel? or options.direction is 'left') and options.fullWidth\n            if options.rightPanel? and options.direction is 'right'\n                console.warn \"You shouldn't use the fullWidth option with a right panel\"\n            rightPanelInfo = null\n\n        # Actual building\n        leftPart = @_getURLFromRoute leftPanelInfo\n        rightPart = @_getURLFromRoute rightPanelInfo\n\n        url = \"##{leftPart}\"\n        if rightPart? and rightPart.length > 0\n            url = \"#{url}/#{rightPart}\"\n\n        return url\n\n\n    ###\n        Closes a panel given a direction. If a full-width panel is closed,\n        the URL points to the default route.\n    ###\n    buildClosePanelUrl: (direction) ->\n\n        # If a left panel is closed, the right panel becomes full-width.\n        # If a full-width panel is closed, `@current.rightPanel` is null and\n        # the default route is loaded.\n        if direction is 'left' or direction is 'full'\n            panelInfo = @current.rightPanel\n        else\n            panelInfo = @current.leftPanel\n\n        if panelInfo?\n            panelInfo.direction = 'left'\n            panelInfo.fullWidth = true\n            return @buildUrl panelInfo\n        else\n            return '#' # loads the default route\n\n\n    # Builds the URL string from a route.\n    _getURLFromRoute: (panel) ->\n        if panel?\n            pattern = @patterns[panel.action].pattern\n\n            if panel.parameters? and not (panel.parameters instanceof Array)\n                panel.parameters = [panel.parameters]\n\n            # gets default values (if relevant) to ease `@buildUrl` usage\n            if (defaultParameters = @_getDefaultParameters(panel.action))?\n                # sets the parameters if they don't exist at all...\n                if not panel.parameters? or panel.parameters.length is 0\n                    panel.parameters = defaultParameters\n\n                # ... or adds them in the relevant place if only some of them\n                # are missing\n                else\n                    for defaultParameter, key in defaultParameters\n                        if not panel.parameters[key]?\n                            panel.parameters.splice key, 0, defaultParameter\n\n            # we default to empty array if there is no parameter in the route\n            parametersInPattern = pattern.match(/:[\\w]+/gi) or []\n\n            # the pattern is progressively filled with values\n            filledPattern = pattern\n            if panel.parameters\n                for paramInPattern, key in parametersInPattern\n                    paramValue = panel.parameters[key]\n                    filledPattern = filledPattern.replace paramInPattern, paramValue\n\n            return filledPattern\n        else\n            return ''\n\n    # Determines and gets the default parameters regarding a specific action\n    _getDefaultParameters: (action) ->\n        defaultParameters = null\n        switch action\n            when 'mailbox.emails', 'mailbox.config'\n                defaultMailbox = MailboxStore.getDefault()\n                defaultParameters = [defaultMailbox.id] if defaultMailbox\n            when 'mailbox.imap.emails'\n                defaultMailbox = MailboxStore.getDefault().id\n                if defaultMailbox\n                    defaultImapFolder = 'lala'\n                    defaultParameters = [defaultMailbox, defaultImapFolder]\n            else\n                defaultParameters = null\n\n        return defaultParameters\n","###\n\n    -- Coffee port of Facebook's flux dispatcher. It was in ES6 and I haven't been\n    successful in adding a transpiler. --\n\n    Copyright (c) 2014, Facebook, Inc.\n    All rights reserved.\n\n    This source code is licensed under the BSD-style license found in the\n    LICENSE file in the root directory of this source tree. An additional grant\n    of patent rights can be found in the PATENTS file in the same directory.\n ###\n\ninvariant = require '../invariant'\n\n_lastID = 1\n_prefix = 'ID_'\n\nmodule.exports = Dispatcher = class Dispatcher\n    constructor: ->\n        this._callbacks = {};\n        this._isPending = {};\n        this._isHandled = {};\n        this._isDispatching = false;\n        this._pendingPayload = null;\n\n    ###\n        Registers a callback to be invoked with every dispatched payload. Returns\n        a token that can be used with `waitFor()`.\n\n        @param {function} callback\n        @return {string}\n    ###\n    register: (callback) ->\n        id = _prefix + _lastID++\n        this._callbacks[id] = callback\n        return id\n\n    ###\n        Removes a callback based on its token.\n\n        @param {string} id\n    ###\n    unregister: (id) ->\n        invariant(\n            this._callbacks[id],\n            'Dispatcher.unregister(...): `%s` does not map to a registered callback.',\n            id\n        )\n        delete this._callbacks[id]\n\n    ###\n        Waits for the callbacks specified to be invoked before continuing execution\n        of the current callback. This method should only be used by a callback in\n        response to a dispatched payload.\n\n        @param {array<string>} ids\n    ###\n    waitFor: (ids) ->\n        invariant(\n            this._isDispatching,\n            'Dispatcher.waitFor(...): Must be invoked while dispatching.'\n        )\n        for ii in [0..ids.length - 1] by 1\n            id = ids[ii]\n            if this._isPending[id]\n                invariant(\n                    this._isHandled[id],\n                    'Dispatcher.waitFor(...): Circular dependency detected while waiting for `%s`.',\n                    id\n                )\n                continue\n\n            invariant(\n                this._callbacks[id],\n                'Dispatcher.waitFor(...): `%s` does not map to a registered callback.',\n                id\n            )\n            this._invokeCallback id\n\n    ###\n        Dispatches a payload to all registered callbacks.\n\n        @param {object} payload\n    ###\n    dispatch: (payload) ->\n        invariant(\n            !this._isDispatching,\n            'Dispatch.dispatch(...): Cannot dispatch in the middle of a dispatch.'\n        );\n        this._startDispatching(payload);\n        try\n            for id of this._callbacks\n                if this._isPending[id]\n                    continue\n                this._invokeCallback id\n        finally\n          this._stopDispatching()\n\n    ###\n        Is this Dispatcher currently dispatching.\n\n        @return {boolean}\n    ###\n    isDispatching: -> return this._isDispatching\n\n    ###\n        Call the callback stored with the given id. Also do some internal\n        bookkeeping.\n\n        @param {string} id\n        @internal\n    ###\n    _invokeCallback: (id) ->\n        this._isPending[id] = true\n        this._callbacks[id](this._pendingPayload)\n        this._isHandled[id] = true\n\n    ###\n        Set up bookkeeping needed when dispatching.\n\n        @param {object} payload\n        @internal\n    ###\n    _startDispatching: (payload) ->\n        for id of this._callbacks\n          this._isPending[id] = false\n          this._isHandled[id] = false\n\n        this._pendingPayload = payload\n        this._isDispatching = true\n\n    ###\n        Clear bookkeeping used for dispatching.\n\n        @internal\n    ###\n    _stopDispatching: ->\n        this._pendingPayload = null\n        this._isDispatching = false\n","/**\n * Copyright (c) 2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule invariant\n */\n\n\"use strict\";\n\n/**\n * Use invariant() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments\n * to provide information about what broke and what you were\n * expecting.\n *\n * The invariant message will be stripped in production, but the invariant\n * will remain to ensure logic does not differ in production.\n */\n\nvar invariant = function(condition, format, a, b, c, d, e, f) {\n  if (true) {\n    if (format === undefined) {\n      throw new Error('invariant requires an error message argument');\n    }\n  }\n\n  if (!condition) {\n    var error;\n    if (format === undefined) {\n      error = new Error(\n        'Minified exception occurred; use the non-minified dev environment ' +\n        'for the full error message and additional helpful warnings.'\n      );\n    } else {\n      var args = [a, b, c, d, e, f];\n      var argIndex = 0;\n      error = new Error(\n        'Invariant Violation: ' +\n        format.replace(/%s/g, function() { return args[argIndex++]; })\n      );\n    }\n\n    error.framesToPop = 1; // we don't care about invariant's own frame\n    throw error;\n  }\n};\n\nmodule.exports = invariant;","AppDispatcher = require '../../../AppDispatcher'\n\n\nmodule.exports = class Store extends EventEmitter\n\n    uniqID: null\n\n    # this variable will be shared with all subclasses so we store the items by subclass\n    # we don't use `@constructor.name` because it breaks when mangled\n    _nextUniqID = 0\n    _handlers = {}\n    _addHandlers = (type, callback) ->\n\n        _handlers[@uniqID] = {} unless _handlers[@uniqID]?\n        _handlers[@uniqID][type] = callback\n\n    # Registers the store's callbacks to the dispatcher\n    _processBinding = ->\n        @dispatchToken = AppDispatcher.register (payload) =>\n            {type, value} = payload.action\n            if (callback = _handlers[@uniqID][type])? then callback.call @, value\n\n\n    constructor: ->\n        super()\n        # set a uniq ID\n        @uniqID = _nextUniqID++\n        @__bindHandlers _addHandlers.bind @\n        _processBinding.call @\n\n    # Must be overriden by each store\n    __bindHandlers: (handle) ->\n        if true\n            throw new Error \"The store #{@constructor.name} must define a `__bindHandlers` method\"\n\n","module.exports =\n\n      # Application\n      \"app loading\"             : \"Chargement…\"\n      \"app back\"                : \"Back\"\n      \"app menu\"                : \"Menu\"\n      \"app search\"              : \"Search…\"\n\n      # Compose window\n      \"compose\"                 : \"Compose new email\"\n      \"compose default\"         : 'Hello, how are you doing today ?'\n\n      # Menu\n      \"menu compose\"            : \"Compose\"\n      \"menu account new\"        : \"New account\"\n\n      # List\n      \"list empty\"              : \"No email in this box.\"\n\n      # Mail\n      \"mail receivers\"          : \"To %{dest}\"\n\n      # Account\n      \"mailbox new\"                 : \"New account\"\n      \"mailbox edit\"                : \"Edit account\"\n      \"mailbox add\"                 : \"Add\"\n      \"mailbox label\"               : \"Label\"\n      \"mailbox name short\"          : \"A short mailbox name\"\n      \"mailbox user name\"           : \"Your name\"\n      \"mailbox user fullname\"       : \"Your name, as it will be displayed\"\n      \"mailbox address\"             : \"Email address\"\n      \"mailbox address placeholder\" : \"Your email address\"\n      \"mailbox password\"            : \"Password\"\n      \"mailbox sending server\"      : \"Sending server\"\n      \"mailbox receiving server\"    : \"IMAP server\"\n      \"mailbox remove\"              : \"Remove\"\n","###\n    Router mixin.\n    Aliases `buildUrl` and `buildClosePanelUrl`\n###\n\nrouter = window.router\n\nmodule.exports =\n\n    buildUrl: (options) ->\n        router.buildUrl.call router, options\n\n    buildClosePanelUrl: (direction) ->\n        router.buildClosePanelUrl.call router, direction\n\n\n\n","module.exports = StoreWatchMixin = (stores) ->\n\n    return {\n        componentDidMount: ->\n            stores.forEach (store) => store.on 'change', @_setStateFromStores\n\n        componentWillUnmount: ->\n            stores.forEach (store) => store.removeListener 'change', @_setStateFromStores\n\n        getInitialState: -> return @getStateFromStores()\n\n        _setStateFromStores: -> @setState @getStateFromStores()\n    }","PanelRouter = require './libs/PanelRouter'\n\nAccountStore = require './stores/AccountStore'\n\nmodule.exports = class Router extends PanelRouter\n\n    patterns:\n        'account.config':\n            pattern: 'account/:id/config'\n            fluxAction: 'showConfigAccount'\n        'account.new':\n            pattern: 'account/new'\n            fluxAction: 'showCreateAccount'\n        'account.mailbox.messages':\n            pattern: 'account/:id/mailbox/:mailbox'\n            fluxAction: 'showMessageList'\n        'account.messages':\n            pattern: 'account/:id'\n            fluxAction: 'showMessageList'\n\n        'message':\n            pattern: 'message/:id'\n            fluxAction: 'showConversation'\n        'compose':\n            pattern: 'compose'\n            fluxAction: 'showComposeNewMessage'\n\n    # default route\n    routes: '': 'account.messages'\n\n    # Determines and gets the default parameters regarding a specific action\n    _getDefaultParameters: (action) ->\n        switch action\n            when 'account.messages', 'account.config'\n                defaultAccount = AccountStore.getDefault()?.id\n                defaultParameters = [defaultAccount]\n            when 'account.imap.messages'\n                defaultAccount = AccountStore.getDefault()?.id\n                defaultMailbox = 'lala'\n                defaultParameters = [defaultAccount, defaultMailbox]\n            else\n                defaultParameters = null\n\n        return defaultParameters","Store = require '../libs/flux/store/Store'\n\n{ActionTypes} = require '../constants/AppConstants'\n\n# Used in production instead of real data during development early stage\nfixtures = [] # @FIXME require '../../../tests/fixtures/accounts.json'\n\n\nclass AccountStore extends Store\n\n    ###\n        Initialization.\n        Defines private variables here.\n    ###\n\n    # Loads data passed by the server or the fixtures\n    accounts = window.accounts or fixtures\n    accounts = fixtures if accounts.length is 0\n\n    # Creates an OrderedMap of accounts\n    _accounts = Immutable.Sequence accounts\n\n        # patch to use fixtures\n        .map (account) ->\n            account.id = account.id or account._id\n            return account\n\n        # sort first\n        .sort (mb1, mb2) ->\n            if mb1.label > mb2.label then return 1\n            else if mb1.label < mb2.label then return -1\n            else return 0\n\n        # sets account ID as index\n        .mapKeys (_, account) -> return account.id\n\n        # makes account object an immutable Map\n        .map (account) ->\n            return Immutable.Map account\n        .toOrderedMap()\n\n    _selectedAccount = null\n    _newAccountWaiting = false\n    _newAccountError = null\n\n    ###\n        Defines here the action handlers.\n    ###\n    __bindHandlers: (handle) ->\n\n        handle ActionTypes.ADD_ACCOUNT, (account) ->\n            account = Immutable.Map account\n            _accounts = _accounts.set account.get('id'), account\n            @emit 'change'\n\n        handle ActionTypes.SELECT_ACCOUNT, (accountID) ->\n            _selectedAccount = _accounts.get(accountID) or null\n            @emit 'change'\n\n        handle ActionTypes.NEW_ACCOUNT_WAITING, (payload) ->\n            _newAccountWaiting = payload\n            @emit 'change'\n\n        handle ActionTypes.NEW_ACCOUNT_ERROR, (error) ->\n            _newAccountError = error\n            @emit 'change'\n\n        handle ActionTypes.EDIT_ACCOUNT, (account) ->\n            account = Immutable.Map account\n            _accounts = _accounts.set account.get('id'), account\n            _selectedAccount = _accounts.get account.get 'id'\n            @emit 'change'\n\n        handle ActionTypes.REMOVE_ACCOUNT, (accountID) ->\n            _accounts = _accounts.delete accountID\n            _selectedAccount = @getDefault()\n            @emit 'change'\n\n    ###\n        Public API\n    ###\n    getAll: -> return _accounts\n\n    getDefault: -> return _accounts.first() or null\n\n    getSelected: -> return _selectedAccount\n\n    getError: -> return _newAccountError\n\n    isWaiting: -> return _newAccountWaiting\n\nmodule.exports = new AccountStore()\n","Store = require '../libs/flux/store/Store'\n\n{ActionTypes} = require '../constants/AppConstants'\n\nclass LayoutStore extends Store\n\n    ###\n        Initialization.\n        Defines private variables here.\n    ###\n    _responsiveMenuShown = false\n\n\n    ###\n        Defines here the action handlers.\n    ###\n    __bindHandlers: (handle) ->\n\n        handle ActionTypes.SHOW_MENU_RESPONSIVE, ->\n            _responsiveMenuShown = true\n            @emit 'change'\n\n        handle ActionTypes.HIDE_MENU_RESPONSIVE, ->\n            _responsiveMenuShown = false\n            @emit 'change'\n\n\n    ###\n        Public API\n    ###\n    isMenuShown: -> return _responsiveMenuShown\n\nmodule.exports = new LayoutStore()\n","Store         = require '../libs/flux/store/Store'\nAppDispatcher = require '../AppDispatcher'\nAccountStore  = require './AccountStore'\n{ActionTypes} = require '../constants/AppConstants'\n\n# Used in production instead of real data during development early stage\nfixtures = [] # @FIXME require '../../../tests/fixtures/mailboxes.json'\n\n\nclass MailboxStore extends Store\n\n    ###\n        Initialization.\n        Defines private variables here.\n    ###\n\n    # Loads from fixtures if necessary\n    if not window.accounts? or window.accounts.length is 0\n        mailboxes = fixtures\n    else\n        mailboxes = []\n\n    # Creates an OrderedMap of mailboxes\n    _mailboxes = Immutable.Sequence mailboxes\n\n        # patch to use fixtures\n        .map (mailbox) ->\n            mailbox.id = mailbox.id or mailbox._id\n            return mailbox\n\n        # sets mailbox ID as index\n        .mapKeys (_, mailbox) -> mailbox.id\n\n        # makes mailbox object an immutable Map\n        .map (mailbox) -> Immutable.Map mailbox\n        .toOrderedMap()\n\n\n    ###\n        Defines here the action handlers.\n    ###\n    __bindHandlers: (handle) ->\n\n        handle ActionTypes.RECEIVE_RAW_MAILBOX, (rawMailboxes) ->\n            _mailboxes = _mailboxes.withMutations (map) ->\n                # create or update\n                for rawMailbox in rawMailboxes\n                    mailbox = Immutable.Map rawMailbox\n                    map.set mailbox.get('id'), mailbox\n\n            @emit 'change'\n\n\n    ###\n        Public API\n    ###\n    getByAccount: (accountID) ->\n        # sequences are lazy so we need .toOrderedMap() to actually execute it\n        _mailboxes.filter (mailbox) -> mailbox.get('mailbox') is accountID\n        .toOrderedMap()\n\n    getSelected: (accountID, mailboxID) ->\n        mailboxes = @getByAccount accountID\n        if mailboxID?\n            return mailboxes.get mailboxID\n        else\n            return mailboxes.first()\n\n    # Takes the 3 first mailboxes to show as \"favorite\".\n    # Skip the first 1, assumed to be the inbox\n    # Should be made configurable.\n    getFavorites: (accountID) ->\n        _mailboxes.filter (mailbox) -> mailbox.get('mailbox') is accountID\n        .skip 1\n        .take 3\n        .toOrderedMap()\n\nmodule.exports = new MailboxStore()\n","Store = require '../libs/flux/store/Store'\nAppDispatcher = require '../AppDispatcher'\n\nAccountStore = require './AccountStore'\n\n{ActionTypes} = require '../constants/AppConstants'\n\n# Used in production instead of real data during development early stage\n#fixtures = require '../../../tests/fixtures/messages.json'\n#fixtures = fixtures.concat require '../../../tests/fixtures/messages_generated.json'\nfixtures = [] # @FIXME\n_idGenerator = 0\n\nclass MessageStore extends Store\n\n    ###\n        Initialization.\n        Defines private variables here.\n    ###\n\n    # Loads from fixtures if necessary\n    if not window.accounts? or window.accounts.length is 0\n        messages = fixtures\n        # messages are sorted server-side so we manually sort them\n        # if we use fixtures\n        messages.sort (e1, e2) ->\n            if e1.createdAt < e2.createdAt\n                return 1\n            else if e1.createdAt > e2.createdAt\n                return -1\n            else\n                return 0\n    else\n        messages = []\n\n    # Creates an OrderedMap of messages\n    _message = Immutable.Sequence messages\n\n        # patch to use fixtures (some of them don't have an ID)\n        .map (message) ->\n            message.id = message.id or message._id or 'id_' + _idGenerator++\n            return message\n\n        # sets message ID as index\n        .mapKeys (_, message) -> message.id\n\n        # makes message object an immutable Map\n        .map (message) -> Immutable.Map message\n        .toOrderedMap()\n\n    ###\n        Defines here the action handlers.\n    ###\n    __bindHandlers: (handle) ->\n\n        handle ActionTypes.RECEIVE_RAW_MESSAGE, onReceiveRawMessage = (message, silent = false) ->\n            # create or update\n            message = Immutable.Map message\n            _message = _message.set message.get('id'), message\n\n            @emit 'change' unless silent\n\n        handle ActionTypes.RECEIVE_RAW_MESSAGE, (messages) ->\n            onReceiveRawmessage message, true for message in messages\n            @emit 'change'\n\n        handle ActionTypes.REMOVE_ACCOUNT, (accountID) ->\n            AppDispatcher.waitFor [AccountStore.dispatchToken]\n            messages = @getMessagesByAccount accountID\n            _message = _message.withMutations (map) ->\n                messages.forEach (message) -> map.remove message.get 'id'\n\n            @emit 'change'\n\n\n    ###\n        Public API\n    ###\n    getAll: -> return _message\n\n    getByID: (messageID) -> _message.get(messageID) or null\n\n    getMessagesByAccount: (accountID) ->\n        # sequences are lazy so we need .toOrderedMap() to actually execute it\n        _message.filter (message) -> message.get('mailbox') is accountID\n        .toOrderedMap()\n\n    getMessagesByMailbox: (mailboxID) ->\n        # sequences are lazy so we need .toOrderedMap() to actually execute it\n        _message.filter (message) -> message.get('imapFolder') is mailboxID\n        .toOrderedMap()\n\n    getMessagesByConversation: (messageID) ->\n        idsToLook = [messageID]\n        conversation = []\n        while idToLook = idsToLook.pop()\n            conversation.push @getByID idToLook\n            temp = _message.filter (message) -> message.get('inReplyTo') is idToLook\n            idsToLook = idsToLook.concat temp.map((item) -> item.get('id')).toArray()\n\n        return conversation\n\nmodule.exports = new MessageStore()\n","MessageActionCreator = require '../actions/MessageActionCreator'\nMailboxActionCreator = require '../actions/MailboxActionCreator'\n\nmodule.exports =\n\n    fetchMessagesByAccount: (mailboxID) ->\n        request.get \"account/#{mailboxID}/messages\"\n               .set 'Accept', 'application/json'\n               .end (res) ->\n            if res.ok\n                MessageActionCreator.receiveRawMessages res.body\n            else\n                console.log \"Something went wrong -- #{res.body}\"\n\n    fetchConversation: (emailID, callback) ->\n        request.get \"message/#{emailID}\"\n               .set 'Accept', 'application/json'\n               .end (res) ->\n            if res.ok\n                MessageActionCreator.receiveRawMessage res.body\n                callback null, res.body\n            else\n                callback \"Something went wrong -- #{res.body}\"\n\n    fetchMailboxByAccount: (accountID) ->\n        request.get \"account/#{accountID}/mailboxes\"\n               .set 'Accept', 'application/json'\n               .end (res) ->\n            if res.ok\n                MailboxActionCreator.receiveRawMailboxes res.body\n            else\n                console.log \"Something went wrong -- #{res.body}\"\n\n    fetchMessagesByFolder: (mailboxID) ->\n        request.get \"mailbox/#{mailboxID}/messages\"\n               .set 'Accept', 'application/json'\n               .end (res) ->\n            if res.ok\n                MessageActionCreator.receiveRawMessage res.body\n            else\n                console.log \"Something went wrong -- #{res.body}\"\n\n    createAccount: (account, callback) ->\n\n        # TODO: validation & sanitization\n\n        request.post 'account'\n               .send account\n               .set 'Accept', 'application/json'\n               .end (res) ->\n            if res.ok\n                callback null, res.body\n            else\n                callback res.body, null\n\n    editAccount: (account, callback) ->\n\n        # TODO: validation & sanitization\n\n        request.put \"account/#{account.id}\"\n               .send account\n               .set 'Accept', 'application/json'\n               .end (res) ->\n            if res.ok\n                callback null, res.body\n            else\n                callback res.body, null\n\n    removeAccount: (accountID) ->\n\n        request.del \"account/#{accountID}\"\n               .set 'Accept', 'application/json'\n               .end (res) -> # nothing\n"]}